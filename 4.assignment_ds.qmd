---
title: "4_assignment_ds"
format: html
editor: visual
---

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(readxl)
library(restatapi)
library(DescTools)
library(ggrepel)
library(flextable)
library(modelr)
library(plm)
library(broom)
library(sandwich)
```

## restatapi

## Toc. eurostat

Vi starter med å hente innholsfortegnelsen fra eurostat. Vi henter innholdsfortegnelsen i rent tekst format. Innholdsfortegnelsen gir vi navnet `toc_txt`.

```{r}
# xml skal ha mer detaljert info
# toc_xml <- get_eurostat_toc()
# tekstversjonen har trolig nok info for vårt formål
toc_txt <- get_eurostat_toc(mode = "txt")
```

## GDP NUTS 3

Vi søker i toc_txt etter tabeller med GDP på nivå NUTS 3 vha. funksjonen `str_detect()`. Denne funksjonen skiller mellom store og små bokstaver. Siden vi ikke vet hvilken skrivemåte som er brukt for gdp og NUTS 3 benytter vi regex for å matche både små og store bokstaver. Vi benytter `filter()` for å finne de tabellene vi ønsker. Vi benytter `select()` for å velge ut kolonnene `title` og `code` som vi ønsker å se på. Vi benytter `flextable()` for å vise tabellen. Vi benytter til slutt `autofit()` for å tilpasse tabellen til siden. Detaljer om regex finner dere i [Slides: Strings and regular expressions](https://msb105.netlify.app/wrangle-data/string-data/string-data#/title-slide) og i [r4ds ed. 1 chp. 14](https://r4ds.had.co.nz/strings.html).

Vi ønsker å finne tabellbeskrivelser som *både* inneholder gdp *og* nuts 3. Trikset for enkelt å få dette til er å ha AND (&) *utenfor* `str_detect()`. Det går an å få til en AND inne i en regexp, men dette kan fort bli kronglete og komplisert.

```{r}
gdp_tabs <- toc_txt |> 
# Regex AND external to regex
   filter(
     str_detect(
       string = title,
       # For å matche både små og store bokstaver
       pattern = '[Gg][Dd][Pp]'
       # AND vha. &
       ) &
     str_detect(
       string = title,
       # For å matche både små og store bokstaver og
       # space eller ikke før 3
       pattern = '[Nn][Uu][Tt][Ss]\\s*3'
       )
     ) |> 
  select(title, code)
```

Vi finner fire tabeller listet i toc_txt.

```{r}
gdp_tabs |> 
  select(title, code) |> 
  flextable()  |> 
  width(1, width = 3.5) |> 
  width(2, width = 1.5)
```

Vi velger å benytte tabellen med kode `nama_10r_3gdp` som har forklarende tekst «Gross domestic product (GDP) at current market prices by NUTS 3 regions». Vi henter «Data Structure Definition» for å finne hva som finnes i dette datasettet. Informasjonen benyttes for å definer «filters» for spørringen mot eurostat.

MERK! Merk bruken av nuts_level = "3" i filters for å få data på NUTS 3 nivå. Denne parameteren var ikke så lett å finne.

Vi laster så ned «Data Structure Definition (DSD)» for tabellen med code `nama_10r_3gdp`.

```{r}
# description nama_10r_3gdp
dsd_gdp <- get_eurostat_dsd("nama_10r_3gdp")
```

```{r}
dsd_gdp |> 
  head(n = 15) |> 
  flextable()  |> 
  width(1, width = 1) |> 
  width(2, width = 1) |> 
  width(3, width = 3.5)
```

Utfra kodene i `dsd_gdp`kan vi da formulere følgende spørring mot Eurostat:

```{r}
# Gross domestic product (GDP) at current market prices by NUTS 3 regions 
# id: nama_10r_3gdp
nama_10r_3gdp <- get_eurostat_data(
  id = "nama_10r_3gdp",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", 
            "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "MIO_PPS_EU27_2020"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  mutate(
    gdp = 1000000 * values
  ) |> 
  select(-c(unit, values)) |> 
  # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2,
  # NUTS1 og NUTSc  
  filter(str_length(geo) == 5)
```

Vi velger å benytte `MIO_PPS_EU27_2020` som mål på GNP. Dette er GNP i løpende priser (million Euro). Det kunne vært aktuelt å benytte `PPS_EU27_2020_HAB` som skal være GNP målt i konstant kjøpekraft. Det synes imidlertid som om `PPS_EU27_2020_HAB` har urimelige/åpenbart feil verdier for en del regioner.

## Population demo_r_pjanaggr3

### Oppgave 1

Søk i `toc_txt` for tabeller med *population* og *NUTS 3*. Pass på at dere dekker både *population* og *Population* og ulike skrivemåter for *NUTS 3*.

```{r}
toc_txt_tabeller <- toc_txt |> 
# Regex AND external to regex
   filter(
     str_detect(
       string = title,
       # For å matche både små og store bokstaver
       pattern = '[Po][Oo][Pp][Uu][Ll][Aa][Tt][Ii][Oo][Nn]'
       # AND vha. &
       ) &
     str_detect(
       string = title,
       # For å matche både små og store bokstaver og
       # space eller ikke før 3
       pattern = '[Nn][Uu][Tt][Ss]\\s*3'
       )
     ) |> 
  select(title, code)
```

### Oppgave 2

i.  Finn koden for tabellen med forklarende tekst «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions».

ii. Last ned Data Structure Definition (DSD) for denne tabellen.

iii. Bruk opplysningene i DSD for å formulere en spørring mot Eurostat og last ned dataene. Gi dataene lastet ned samme navn som Eurostat sin kode for tabellen. Vi er bare interessert i totalbefolkning og ignorerer derfor både kjønn og alder. Vi ønsker data for årene 2000-2020.

iv. Bruk `filter(str_length(geo) == 5)` for å begrense datasettet til NUTS3 regioner. Vi vil gjøre vår egen aggregering.

v.  Hent data for landene:

```{r}
dsd_popgdp <- get_eurostat_dsd("nama_10r_3popgdp")
```

```{r}
nama_10r_3popgdp <- get_eurostat_data(
  id = "nama_10r_3popgdp",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "THS"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  mutate(annualpop = 1000 * values) |>
  select(-"values") |>
  filter(str_length(geo) == 5)
```

### Oppgave 3

Hent ned befolkningsdata fra tabellen som har teksten «Population on 1 January by broad age group, sex and NUTS 3 region». Gi også her dataene samme navn som tabell-koden hos Eurostat. Igjen vil vi ikke skille på kjønn eller alder.

```{r}
dsd_pjanaggr3 <- get_eurostat_dsd("demo_r_pjanaggr3")
```

```{r}
demo_r_pjanaggr3 <- get_eurostat_data(
  id = "demo_r_pjanaggr3",
  filters = list(
    geo = c("AT", "DE", "DK", "FR", "EL", "ES", "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
    nuts_level = "3",
    unit = "NR",
    sex = "T",
    age = "TOTAL"
  ),
  exact_match = FALSE,
  date_filter = 2000:2020,
  stringsAsFactors = FALSE
  ) |> 
  filter(str_length(geo) == 5)
```

### Oppgave 4

Bruk `setdiff()` for å finne NUTS3 soner som inngår i «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions», men ikke i «Population on 1 January by broad age group, sex and NUTS 3 region».

```{r}
setdiff(nama_10r_3popgdp$geo, demo_r_pjanaggr3$geo)
```

### Oppgave 5

Bruk `setdiff()` for å finne NUTS3 soner som inngår i «Population on 1 January by broad age group, sex and NUTS 3 region», men ikke i «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions».

```{r}
setdiff(demo_r_pjanaggr3$geo, nama_10r_3popgdp$geo)
```

### Oppgave 6

Gjør en `full_join()` av de to populasjonstabellene. Gi resultatet navnet `full_pop_nuts3`.

```{r}
full_pop_nuts3 <- demo_r_pjanaggr3 |>
  full_join(nama_10r_3popgdp,
            by = join_by(geo, time)) |>
              select(-c(unit.x, unit.y, sex, age)) |>
  rename("pop.x" = values, "pop.y" = annualpop)
            
```

### Oppgave 7

Bruk setdiff() for å sjekke sonene i full_pop_nuts3 mot dem vi har i GDP tabellen.

```{r}
setdiff(full_pop_nuts3$geo, nama_10r_3gdp$geo)
```

### Oppgave 8

Bruk setdiff() for å sjekke sonene i GDP tabellen mot dem vi har i full_pop_nuts3.

```{r}
setdiff(nama_10r_3gdp$geo, full_pop_nuts3$geo)
```

### Oppgave 9

Fjern \*\*ZZZ sonene fra `nama_10r_3gdp`.

```{r}
nama_10r_3gdp <- nama_10r_3gdp |>
  subset(!grepl('_ZZZ$', geo))
```

```{r}
full_pop_nuts3 |> 
  filter(geo %in% c("NO053", "NO060", "NO061")) |> 
  filter(time %in% 2014:2020) |> 
  arrange(time, geo)
```

### Oppgave 10

Lag en ny variabel pop i full_pop_nuts3 ut fra diskusjonen ovenfor. Dropp deretter variablene pop.x og pop.y.

```{r}
full_pop_nuts3 <- full_pop_nuts3 |> 
  mutate(
    pop = ifelse(
      test = is.na(pop.x) == TRUE, 
      yes = pop.y, 
      no = pop.x
      )
  ) |> 
  select(-pop.x, -pop.y)
```

### Oppgave 11

Undersøk om vi har noen NUTS 3 soner med pop lik 0. Hvis det er noen så rekod disse til NA

```{r}
colSums(full_pop_nuts3 == 0)
```

Her fant vi at det er 117 hvor antallet er 0

```{r}
full_pop_nuts3 <- full_pop_nuts3 |>
  mutate_at(c('pop'), ~na_if(., 0))
```

Her har vi endret alle 0 verdiene i kollonne pop til NA verdi, så kontrollerer vi at vi ikke har flere 0 verdier

```{r}
colSums(full_pop_nuts3 == 0)
```

### Oppgave 12

Utfør en left_join() der populasjonsdata blir lagt til datasettet som innholder GDP-data. Gi resultatet navnet `eu_data`.

```{r}
eu_data <- nama_10r_3gdp |>
  left_join(full_pop_nuts3,
            by = join_by(geo, time))
```

```{r}
dim(eu_data)
```

***Her ser vi at vi ikke har likt som i oppgavesettet, men vi finner ikke hvor feilen ligger. Avviket er 123. Vi ser også i oppgave 12 at disse tallene kommer opp som NA verdier.***

```{r}
# lager en ny variabel
eu_data <- eu_data |> 
  mutate(
    country = str_sub(geo, start = 1L, end = 2L)
  )
```

```{r}
#sjekker ut antall NUTS 3
eu_data |> 
  distinct(geo, .keep_all = TRUE) |> 
  group_by(country) |> 
  summarise(Antall = n(), .groups = "drop")
```

```{r}
#sjekker ut summary for variablene 
eu_data |> 
  summary()
```

```{r}
#endrer navn og rekkefølge på variablene
eu_data <- eu_data |> 
  select(country, NUTS3 = geo, year = time, gdp, pop)
```

```{r}
# Rydder opp
# Sletter alle objekt utenom eu_data
# don't use if you don't mean it
rm(list = setdiff(ls(), "eu_data"))
```

### Oppgave 13

Beregn `gdp_per_capita` for hver NUTS3 region for årene 2000-2020. Avrund til 2 desimaler.

```{r}
eu_data <- eu_data |>
    mutate(gdp_per_capita = gdp / pop)
```

Avrunder til to desimaler.

```{r}
round(eu_data$gdp_per_capita, digits = 2)
```

Sjekker summary gdp_per_capita.

```{r}
eu_data |>
  select(gdp_per_capita) |> 
  summary()
```

### Oppgave 14

Bruk case_when() for å legge til variabelen `country_name` før vi går videre. Østerrike for AT, Belgia for BE etc..

```{r}
eu_data <- eu_data |>
  mutate(
    "country_name" = case_when(
      country %in% c("AT") ~ "Østerrike",
      country %in% c("DE") ~ "Tyskland",
      country %in% c("DK") ~ "Danmark",
      country %in% c("FR") ~ "Frankrike",
      country %in% c("EL") ~ "Hellas",
      country %in% c("ES") ~ "Spania",
      country %in% c("IT") ~ "Italia",
      country %in% c("NL") ~ "Nederland",
      country %in% c("BE") ~ "Belgia",
      country %in% c("IE") ~ "Irland",
      country %in% c("PL") ~ "Polen",
      country %in% c("PT") ~ "Portugal",
      country %in% c("NO") ~ "Norge",
      country %in% c("SE") ~ "Sverige",
      country %in% c("FI") ~ "Finland",
      country %in% c("CH") ~ "Sveits")
  )
```

### Oppgave 15

Lag de tre variablene NUTS2, NUTS1 og NUTSc fra NUTS3. Dette gjøres enklest vha. mutate() og str_sub(). Bruker også select() for å få variablene i rekkefølgen: country_name, country, year, NUTS3, NUTS2, NUTS1, NUTSc, gdp, pop, gdp_per_capita . NUTSc er vår egen «oppfinnelse» og angir land (to første karakterer i NUTS kode).

```{r}
eu_data <- eu_data |>
  mutate(
    NUTS2 = str_sub(NUTS3, start = 1, end = 4),
    NUTS1 = str_sub(NUTS3, start = 1, end = 3),
    NUTSc = str_sub(NUTS3, start = 1, end = 2)) |> 
  select(country_name, country, year, NUTS3, NUTS2, NUTS1, NUTSc, gdp, pop, gdp_per_capita)
```

### Oppgave 16

Bruk koden nedenfor til å beregne Gini-koeffisienter på NUTS2 nivå. Beregn også `populasjonen` og `gdp` på NUTS2 nivå. Bruk de to siste for å regne ut `gdp_per_capita` for hvert NUTS2 område. Finn også antall NUTS3 regioner som finnes i hver NUTS2 region. Gi denne variabelen navnet `num_nuts3`. Det er viktig at dere beregner Gini-koeffisient før dere aggregerer populasjon og GDP. Resultatet legger dere i en tibble kalt `gini_NUTS2`.

```{r}
gini_NUTS2 <- eu_data |> 
  group_by(NUTS2, country_name, country, year) |> 
  summarise(
    gini_nuts2 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
    ) |> 
  select(country_name, country, NUTS2, year, pop, gdp, 
         gdp_per_capita, num_nuts3, gini_nuts2)
```

```{r}
gini_NUTS2 |> 
  summary() |> 
  print(width = 80)
```

Vi ser at vi har et spenn i Gini-koeffisienten på NUTS2 nivå fra 0.00 til 0.45. Vi har også 800 NAs som stammer fra de 110 NA-ene vi har i `pop`. Vi ser også at antall NUTS3 i NUTS2 regioner spenner fra 1 til 23.

Sjekker obs. med Gini avrundet til 0,0000.

```{r}
gini_NUTS2 |> 
  select(-country_name) |> 
  filter(gini_nuts2 < 0.001)
```

### Oppgave 17

```{r}
gini_NUTS1 <- eu_data |> 
  group_by(NUTS1, country_name, country, year) |> 
  summarise(
    gini_nuts1 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
    ) |> 
  select(country_name, country, NUTS1, year, pop, gdp, 
         gdp_per_capita, num_nuts3, gini_nuts1)
```

```{r}
gini_NUTS1 |> 
  summary() |> 
  print(width = 80)
```

### Oppgave 18

```{r}
gini_NUTSc <- eu_data |> 
  group_by(NUTSc, country_name, country, year) |> 
  summarise(
    gini_nutsc = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
    ) |> 
  select(country_name, country, NUTSc, year, pop, gdp, 
         gdp_per_capita, num_nuts3, gini_nutsc)
```

```{r}
gini_NUTSc |> 
  summary() |> 
  print(width = 80)
```

### Oppgave 19

```{r}
gini_NUTS2_nest <- gini_NUTS2 |> 
  group_by(country_name, country) |> 
  nest(.key = "NUTS2_data") |> 
  ungroup()
```

### Oppgave 20

```{r}
gini_NUTS1_nest <- gini_NUTS1 |> 
  group_by(country_name, country) |> 
  nest(.key = "NUTS1_data") |> 
  ungroup()
```

### Oppgave 21

```{r}
gini_NUTSc_nest <- gini_NUTSc |> 
  group_by(country_name, country) |> 
  nest(.key = "NUTSc_data") |> 
  ungroup()
```

### Oppgave 22

```{r}
NUTS3_nest <- eu_data |> 
  group_by(country_name, country) |> 
  nest(.key = "NUTS3_data") |> 
  ungroup()
```

```{r}
eu_data_nested <- gini_NUTS2_nest |> 
  left_join(gini_NUTS1_nest,
            by = join_by(country_name, country)) |> 
  left_join(gini_NUTSc_nest,
            by = join_by(country_name, country)) |> 
  left_join(NUTS3_nest,
            by = join_by(country_name, country)) |> 
  select(country_name, country, NUTS3_data, NUTS2_data, NUTS1_data, NUTSc_data)
```

```{r}
# don't run if you don't mean it.
rm(list = setdiff(ls(), c("eu_data", "eu_data_nested")))
```

### Oppgave 23

Lag et lineplot i ggplot som viser utviklingen i Gini-koeffisient på nasjonsnivå for de 16

landene vi har med. Husk argumentet group =.

```{r}
eu_data_nested |>
  unnest(NUTSc_data) |>
  ggplot(aes(x = year, y = gini_nutsc, color = country)) + 
  geom_line(aes(group = country)) +
  geom_smooth(se = FALSE) +
  geom_hline(yintercept = 0)
```

```{r}
eu_data_nested |> 
  unnest(NUTSc_data) |> 
  filter(year == 2020) |> 
  select(country_name, gini_nutsc) |> 
  arrange(desc(gini_nutsc)) |> 
  flextable() |> 
  width(1, width = 1.5) |> 
  width(2, width = 1.5)
```

### Oppgave 24

```{r}
eu_data_nested |> 
  unnest(NUTS2_data) |> 
  filter(str_detect(NUTS2, 'IE')) |> 
  select(country_name, year, NUTS2, gini_nuts2) |> 
  arrange(desc(year)) |> 
  flextable() |> 
  width(1, width = 1.5) |> 
  width(2, width = 1.5)
```

### Oppgave 25

Lag et line-plot som viser utviklingen i Gini-koeffisientene for NUTS2 regionene i Spania.

```{r}
eu_data_nested |>
  unnest(NUTS2_data) |>
  filter(str_detect(NUTS2, 'ES')) |>
  ggplot(aes(x = year, y = gini_nuts2, color = NUTS2)) + 
  geom_line(aes(group = NUTS2)) +
  geom_smooth(mapping = aes(x = year, y = gini_nuts2)) +
  geom_hline(yintercept = 0)
```

### Oppgave 26

```{r}
eu_data_nested |>
  unnest(NUTS1_data) |>
  filter(str_detect(NUTS1, 'ES')) |> 
  ggplot(aes(x = year, y = gini_nuts1, color = NUTS1)) + 
  geom_line(aes(group = NUTS1)) +
  geom_smooth() +
  geom_hline(yintercept = 0)
```

### Oppgave 27

*Det er større fordeling av verdiskapning i NUTS1-regionene enn NUTS2.*

### Oppgave 28

```{r}
eu_data_nested |>
  unnest(NUTS2_data) |>
  filter(str_detect(NUTS2, 'ES')) |> 
  ggplot(aes(x = year, y = gdp_per_capita, color = NUTS2)) + 
  geom_line(aes(group = NUTS2)) +
  geom_smooth() +
  geom_hline(yintercept = 0) +
  theme_minimal()

```

Vi ser at korona kom i 2020 som medførte at GDP falt betraktelig dette året.

#### Oppgave 29

Lag et line-plot som viser utviklingen i Gini-koeffisient for NUTS2 regionene i Tyskland.

```{r}
eu_data_nested |>
  unnest(NUTS2_data) |>
  filter(str_detect(NUTS2, 'DE')) |>
  ggplot(aes(x = year, y = gini_nuts2, color = NUTS2)) + 
  geom_line(aes(group = NUTS2)) +
  geom_smooth(mapping = aes(x = year, y = gini_nuts2)) +
  geom_hline(yintercept = 0)
```

### Oppgave 30

```{r}
eu_data_nested |>
  unnest(NUTS1_data) |>
  filter(str_detect(NUTS1, 'DE')) |>
  ggplot(aes(x = year, y = gini_nuts1, color = NUTS1)) + 
  geom_line(aes(group = NUTS1)) +
  geom_smooth(mapping = aes(x = year, y = gini_nuts1)) +
  geom_hline(yintercept = 0)
```

Ikke like mye spredning i NUTS1-regionene.

### Oppgave 31

```{r}
eu_data_nested |>
  unnest(NUTS2_data) |>
  filter(str_detect(NUTS2, 'FR')) |>
  ggplot(aes(x = year, y = gini_nuts2, color = NUTS2)) + 
  geom_line(aes(group = NUTS2)) +
  geom_smooth(mapping = aes(x = year, y = gini_nuts2)) +
  geom_hline(yintercept = 0)
```

```{r}
eu_data_nested |> 
  unnest(NUTS2_data) |> 
  filter(country_name == "Frankrike") |> 
  filter(year == 2020) |> 
  select(NUTS2, gini_nuts2) |> 
  arrange(desc(gini_nuts2)) |> 
  flextable()  |> 
  width(1, width = 1.5) |> 
  width(2, width = 1.5)
```

### Oppgave 32

```{r}
eu_data_nested |>
  unnest(NUTS1_data) |>
  filter(str_detect(NUTS1, 'FR')) |>
  ggplot(aes(x = year, y = gini_nuts1, color = NUTS1)) + 
  geom_line(aes(group = NUTS1)) +
  geom_smooth(mapping = aes(x = year, y = gini_nuts1)) +
  geom_hline(yintercept = 0)
```

### Oppgave 33

Vi ser at for Frankrike er det en region (FR1) som har klart større forskjeller mht. verdistgning enn de andre. Sjekk denne regionen nærmere.

```{r}
eu_data_nested |>
  # ag_comment: ingen gini på NUTS 3 nivå, men vi har på NUTS 2 nivå
  #unnest(NUTS3_data) |>
  unnest(NUTS2_data) |>
  filter(str_sub(NUTS2, 1, 3) == 'FR1') |> 
  # ag_comment: Gjør year om to date får å få fin x-akse
  mutate(year = make_date(year)) |> 
  ggplot(aes(x = year, y = gini_nuts2, color = NUTS2)) + 
  geom_line(aes(group = NUTS2)) +
  #geom_smooth() +
  geom_hline(yintercept = 0) +
  theme_minimal()
```

### Oppgave 34

Vis utviklingen i `gdp_per_capita` for NUTS3 sonene i FR1.

```{r}
eu_data_nested |>
  unnest(NUTS3_data) |>
  filter(str_detect(NUTS1, 'FR1')) |> 
  # ag_comment: Gjør year om to date får å få fin x-akse
  mutate(year = make_date(year)) |> 
  ggplot(aes(x = year, y = gdp_per_capita, color = NUTS3)) + 
  geom_line(aes(group = NUTS3)) +
  #geom_smooth() +
  geom_hline(yintercept = 0) +
  theme_minimal()
```

### Oppgave 35

Hva ser ut til å være årsaken til den høye Gini-koeffisienten for FR1?

Det er to soner i NUTS3 som har mer enn dobbel så høy GDP per capita som de resterende. Dette gjør Gini-koeffisienten høy.

ag_comment: NUTS 1 sonen FR1 innholder bare en NUTS2 sone FR10. Som vi ser under oppgave 34 innholder FR10 8 NUTS3 soner der sonene FR101 og FR102 har mye høyere gdp_per_capita en de andre. Dette er årsaken til den høye gini-koeffisienten for FR1.

### Oppgave 36

```{r}
NUTS2_diff <- eu_data_nested |> 
  unnest(NUTS2_data) |> 
  mutate(
    # Når vi tar diff får vi en obs. mindre. Legger derfor inn en NA først
    # i vektoren
    diff_gdp_per_capita = c(NA, diff(gdp_per_capita)),
    diff_gini_nuts2 = c(NA, diff(gini_nuts2))
    ) |> 
  select(country_name, country, NUTS2, year, diff_gdp_per_capita, diff_gini_nuts2) %>% 
  # Fjerner obs. der vi har NA
  filter(complete.cases(.)) |> 
  group_by(country_name, country, NUTS2) |> 
  nest(.key = "NUTS2_diff")
```

### Oppgave 37

```{r}
variabel_model <- function(a_df) {
  # same simple model for each country
  lm(diff_gini_nuts2 ~ diff_gdp_per_capita, data = a_df)
}
```

```{r}
NUTS2_diff <- NUTS2_diff %>% 
  # remember map(data, function), our data named data
  mutate(model = map(NUTS2_diff, .f = variabel_model))
```

### Oppgave 38

Hent ut koeffisientene fra de 173 modellene og legg resultatet i variabelen mod_coeff. Gjør dette ved å «mappe» funksjonen coeff() på list_column modell. (Hint: Husk at hvis vi ønsker en dataframe så må `_df` varianten av map.)

```{r}
NUTS2_diff <- NUTS2_diff  |> 
  group_by(country_name, country, NUTS2) |> 
  mutate(
    mod_coeff = map_df(
      .x = model,
      .f = coef
      )
    )
```

### Oppgave 39

```{r}
NUTS2_diff <- NUTS2_diff  |> 
  group_by(country_name, country, NUTS2) |> 
  mutate(
    mod_sum = map_df(
      .x = model,
      .f = glance
      )
    )
```

### Oppgave 40

```{r}
NUTS2_diff$mod_coeff |> 
  ggplot() +
  geom_density(mapping = aes(x = diff_gdp_per_capita), adjust = 0.6) +
  geom_vline(mapping = aes(xintercept = mean(diff_gdp_per_capita, na.rm = TRUE)), 
                           colour = "gray60",
                           linetype = "dashed")
```

### Oppgave 41

Hvor mange av de 173 regrersjonskoeffisientene for `diff_gdp_per_capita` er positive?

```{r}
sum(
NUTS2_diff$mod_coeff$diff_gdp_per_capita > 0)
```

### Oppgave 42

Finn mean av de 173 koeffisientene beregnet for `diff_gdp_per_capita`.

```{r}
mean(
NUTS2_diff$mod_coeff$diff_gdp_per_capita)
```

### Oppgave 43

Utfør en enkel t-test for å teste om diff_gdp_per_capita er signifikant større enn 0.

```{r}
t.test(NUTS2_diff$mod_coeff$diff_gdp_per_capita, mu = 0)
```

T-test viser at diff_gdp_per_capita er signifikant større enn 0.

### Oppgave 44

Bruk funksjonen `plm()` fra pakken `plm` til å utføre en panel-regresjon på dataene. For argumentet index kan dere bruke `index = c("NUTS2", "year")`. Bruk samme enkle modell som ovenfor dvs. `diff_gini_nuts2 ~ diff_gdp_per_capita`. Legg resultatet av regresjonen i et objekt `p_mod`.

```{r}
p_mod <- NUTS2_diff |>
  # ag_comment: Trikset er følgende select som gir oss et mer ordnet datasett
  select(NUTS2, NUTS2_diff) |>
  unnest(NUTS2_diff) %>% 
  plm(
    formula = 'diff_gini_nuts2 ~ diff_gdp_per_capita',
    data = ., 
    index = c("NUTS2", "year")
    )
```

```{r}
#| paged.print: false
# med select
NUTS2_diff |>
  select(NUTS2, NUTS2_diff) |> 
  unnest(NUTS2_diff) |> 
  head(n = 10)
```

Tror problemet er at plm() ikke like list-columns. Ser at hvis vi dropper disse fra data så er plm() happy.

```{r}
p_mod <- NUTS2_diff |>
  unnest(NUTS2_diff) %>% 
  # dropper list-columns
  # Bruker %>% for å kunne benytte . for data
  select(-model, -mod_coeff, -mod_sum) %>%
  # plm() er happy
  plm(
    formula = 'diff_gini_nuts2 ~ diff_gdp_per_capita',
    data = ., 
    index = c("NUTS2", "year")
    )
```

### Oppgave 45

Vis `summary()` for `p_mod` og tolk resultatet.

```{r}
summary(p_mod)
```

#### Tolkning: 

-   T-, og P-verdi: med en t-verdi på 23.027 og p-verdi på 2.2.e-16 er modellen er statistisk signifikant.

-   F-testen viser 530.243 med p-verdi på 2.2.e-16 viser at det er sammenheng mellom uavhengige og avhengige variabler.

##### 

### Oppgave 46

En alternativ måte å finne `summary()` for p_mod er gjengitt i chunk-en nedenfor. Forklar hva som blir gjort her og sammenlign med resultatet av en ordinær `summary()`.

```{r}
summary(p_mod, vcov = function(x) vcovHC(x, method = "white2"))
```

#### Hva som blir gjort og sammenlign

Denne modellen undersøker også for heteroskedastisitet. Her ser vi på fordeling av residualer i datasettet. Denne modellen kommer frem til samme resultat som den forrige, men med noe høyere standardavvik og lavere F-test, men testen er likevel signifikant.
